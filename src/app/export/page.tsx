
'use client';

import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Copy, File as FileIcon } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { ScrollArea } from '@/components/ui/scroll-area';

const allFiles = [
  {
    path: '.env',
    content: ``
  },
  {
    path: '.vscode/settings.json',
    content: `{
    "IDX.aI.enableInlineCompletion": true,
    "IDX.aI.enableCodebaseIndexing": true
}`
  },
  {
    path: 'PRODUCT_REQUIREMENTS.md',
    content: `# Product Requirements Document: VisaFor CRM

---

## 1. Introduction

### 1.1. Purpose
This document outlines the product requirements for **VisaFor**, an AI-powered Customer Relationship Management (CRM) platform designed to streamline the immigration process for legal professionals and their clients. It details user roles, features, and technical specifications for the application.

### 1.2. Scope
The scope of this document covers the core functionality of the VisaFor platform, including three primary user roles (Super Admin, Lawyer, Client), their respective dashboards, AI-powered tools, client management, and communication features.

## 2. User Roles & Personas

The platform is designed for three distinct user roles:

*   **Client / Applicant:** Individuals seeking immigration services. They need to track their case, communicate with their lawyer, and manage their documents.
*   **Lawyer / Legal Professional:** Licensed immigration lawyers or consultants managing multiple clients, cases, and their own team members within the CRM.
*   **Super Admin:** The platform administrator responsible for overall user management, system health, financial oversight, and platform-wide settings.

## 3. Platform-Wide Features

### 3.1. Authentication
*   **Registration:** Users can sign up as either a "Lawyer/Professional" or "Client/Applicant". Registration requires a full name, email, and password.
*   **Login:** Secure email and password login for all user roles.
*   **Password Reset:** Users can request a password reset link via email.
*   **Role-Based Access Control:** The system enforces strict role-based access. Users are redirected to the appropriate dashboard upon login. Unauthorized access attempts redirect users to the login page.
*   **Session Persistence:** User sessions are maintained after login.

### 3.2. Referrals & Invitations
*   **Lawyer-to-Client Invitation:** Lawyers can invite new or existing clients to the portal by generating a unique, secure registration link.
*   **Client-to-Client Referral:** Clients have a unique referral link to earn in-app "coins" when their friends register.

---

## 4. Super Admin Role: Features & Requirements

The Super Admin has global oversight of the entire platform.

### 4.1. Admin Dashboard
*   **High-Level Stats:** View key platform metrics: Total Applicants, Active Firms, Total Revenue, and Critical Action Items.
*   **Action Items:** A list of urgent tasks requiring administrative attention, such as pending lawyer account activations and overdue invoices.

### 4.2. User Management
*   **View & Manage Users:** Access separate lists for "Lawyers / Firms" and "Applicants / Clients".
*   **Lawyer Activation:** Approve, reject, or suspend lawyer accounts. View license and registration details for verification.
*   **Manage Subscriptions:** Modify the subscription plan (Starter, Pro, Enterprise) for any law firm.
*   **Client Management:** Block or manage client accounts.

### 4.3. Firm & Lead Management
*   **View Leads:** Manage a pipeline of potential law firms interested in joining the platform.
*   **Convert Leads:** Convert a qualified lead into a new law firm account, triggering the onboarding and activation process.

### 4.4. Platform Analytics
*   **Visual Reports:** View charts and graphs for:
    *   User Growth (Lawyers vs. Clients) over time.
    *   Quarterly Revenue.
    *   Breakdown of application statuses across the platform.
    *   Client geographic distribution.

### 4.5. Financial Oversight
*   **Firm Subscriptions:** View and manage the subscription status for all legal firms.
*   **Client Invoices:** View a log of all one-time invoices generated by lawyers for their clients.
*   **Transaction History:** A complete log of all payments processed.

### 4.6. Platform Settings
*   **General:** Manage platform branding (name, logo) and global feature flags.
*   **Billing & Subscriptions:** Configure pricing, features, and limits for each subscription tier.
*   **Integrations:** Manage global API keys for services like Google Cloud and Stripe.

### 4.7. Platform-wide Management
*   **Tasks:** View and manage internal tasks assigned to platform staff.
*   **Support Tickets:** View and manage support tickets submitted by all users.
*   **System Notifications:** Compose and send broadcast notifications to all users, lawyers only, or clients only.

## 5. Lawyer / Legal Professional Role: Features & Requirements

This role is for professionals managing their immigration practice.

### 5.1. Lawyer Dashboard
*   **Key Metrics:** At-a-glance view of Total Clients, Pending Applications, Upcoming Appointments, and Revenue.
*   **AI Risk Alerts:** An AI-powered tool that scans active client files and flags potential issues (e.g., approaching deadlines, missing documents).
*   **Recent Activity:** Lists of recent applications and upcoming appointments for quick access.

### 5.2. Client & Lead Management
*   **Client List (CRM):** A searchable and filterable database of all clients.
*   **Client Profile:** A detailed 360-degree view of a client, including case summary, documents, tasks, activity log, and AI-powered success predictions.
*   **Lead Management:** Manage a pipeline of prospective clients. Log activities (calls, emails) and convert qualified leads into active clients.

### 5.3. Document Management
*   **Document Library:** Create, edit, and manage reusable document templates.
*   **Document Categories:** Organize templates into categories (e.g., Express Entry, Work Permit) for easy assignment.
*   **Client Document Management:** Request documents from clients, review uploaded files, approve or reject submissions, and add comments.

### 5.4. AI-Powered Tools
*   **Document Summarizer:** Generate concise summaries of long documents.
*   **Application Checker:** Paste application text to check for errors, omissions, and inconsistencies.
*   **AI-Assisted Messaging:** Generate professional, context-aware messages for clients.
*   **Client Career Tools:** Generate resumes and cover letters for clients based on their intake form data to assist with their job search.

### 5.5. Team Management
*   **View Team:** View a roster of all team members within the firm.
*   **Manage Roles:** Assign access levels (Admin, Member, Viewer) to team members.
*   **Performance Tracking:** View performance metrics for individual team members.

### 5.6. Finance & Appointments
*   **Billing & Invoicing:** Create, view, and manage invoices for clients.
*   **Appointments:** View and manage a calendar of all client appointments.

## 6. Client / Applicant Role: Features & Requirements

This role is for the end-user seeking immigration services.

### 6.1. Onboarding
*   **CRS Score Calculator:** New users are guided through a multi-step form to collect data on their age, education, work experience, and language skills.
*   **AI-Powered Assessment:** The collected data is used to calculate an estimated Comprehensive Ranking System (CRS) score, providing immediate feedback and value to the user.

### 6.2. Client Dashboard
*   **Case Overview:** A welcome banner showing current application status and the next step.
*   **AI-Powered Timeline:** A personalized, estimated timeline of key milestones in the user's immigration journey.
*   **Quick Actions:** Easy access to view documents or message their lawyer.

### 6.3. Finding & Connecting with Lawyers
*   **Lawyer Directory:** A searchable directory of verified legal professionals on the platform. Users can filter by specialty, location, language, and consultation fee.
*   **Lawyer Profiles:** Detailed profile pages for each lawyer, showcasing their experience, specialties, stats, and firm details.
*   **Connection Request:** Clients can initiate a connection by sending a request that includes a message and a proposed meeting time selected from an interactive calendar. Their profile information and AI assessment score are shared upon sending the request.

### 6.4. Case & Document Management
*   **My Documents:** View a list of all requested and uploaded documents, track their status (Requested, Uploaded, Approved, Rejected), and upload new files.
*   **Editable Intake Form:** Clients can access and update their initial intake form data at any time. This form serves as a living profile.

### 6.5. Communication & AI Tools
*   **Secure Messaging:** A dedicated interface for direct, secure messaging with their connected legal team.
*   **AI Assist (Coin-Based):**
    *   **Writing Assistant:** Use "coins" to improve text for emails or other communications.
    *   **Resume & Cover Letter Builder:** Use "coins" to generate career documents based on their intake form data.

---

## 7. Technical Stack & Architecture

*   **Frontend:** Next.js (App Router), React, TypeScript
*   **UI:** ShadCN UI, Tailwind CSS
*   **AI/Backend Logic:** Google AI via Genkit
*   **State Management:** React Context API (\`GlobalDataContext\`)
*   **Database & Auth (Simulated/Planned):** Firebase (Firestore, Auth, Storage)

## 8. Future Considerations (Out of Scope for Current Build)

*   **Full Firebase Integration:** Implement live Firestore queries, secure file uploads to Firebase Storage, and robust Firestore Security Rules.
*   **Real-time Notifications:** Transition from static data to real-time updates for notifications and messages.
*   **Email Automation:** Integrate a service (e.g., using Firebase Functions) to send actual emails for invitations, password resets, and notifications.`
  },
  {
    path: 'README.md',
    content: `# Firebase Studio

This is a NextJS starter in Firebase Studio.

To get started, take a look at src/app/page.tsx.`
  },
  {
    path: 'USER_MANUAL.md',
    content: `# VisaFor - User Manual

---

## Table of Contents

1.  [**Introduction**](#introduction)
    *   [1.1. What is VisaFor?](#what-is-visafor)
    *   [1.2. Getting Started: Account Creation & Login](#getting-started-account-creation--login)
2.  [**User Role: Applicant**](#user-role-applicant)
    *   [2.1. First-Time Onboarding](#first-time-onboarding)
    *   [2.2. The Applicant Dashboard](#the-applicant-dashboard)
    *   [2.3. Finding and Connecting with Lawyers](#finding-and-connecting-with-lawyers)
    *   [2.4. Managing Your Documents](#managing-your-documents)
    *   [2.5. Messaging Your Lawyer](#messaging-your-lawyer)
3.  [**User Role: Lawyer / Team Member**](#user-role-lawyer--team-member)
    *   [3.1. The Lawyer Dashboard](#the-lawyer-dashboard)
    *   [3.2. Managing Clients](#managing-clients)
    *   [3.3. Case Management: Documents & Tasks](#case-management-documents--tasks)
    *   [3.4. Using AI Tools](#using-ai-tools)
    *   [3.5. Managing Your Team](#managing-your-team)
4.  [**User Role: Super Admin**](#user-role-super-admin)
    *   [4.1. The Super Admin Dashboard](#the-super-admin-dashboard)
    *   [4.2. User Management (All Users)](#user-management-all-users)
    *   [4.3. Platform Analytics & Reports](#platform-analytics--reports)
    *   [4.4. Managing Payments & Subscriptions](#managing-payments--subscriptions)
    *   [4.5. System-Wide Settings](#system-wide-settings)
5.  [**Appendices**](#appendices)
    *   [5.1. Troubleshooting](#troubleshooting)
    *   [5.2. Contact Support](#contact-support)
    *   [5.3. Glossary of Terms](#glossary-of-terms)

---

## 1. Introduction

### 1.1. What is VisaFor?

Welcome to VisaFor, your all-in-one platform for managing the complexities of the immigration process. Our application is designed to connect applicants with experienced legal professionals, streamline case management, and leverage powerful AI tools to improve efficiency and success rates.

**Key Features:**

*   **Client Management:** A centralized database for lawyers to manage client information, documents, and communication.
*   **AI-Powered Tools:** Includes an Application Checker, Document Summarizer, and AI-Assisted Messaging to save time and reduce errors.
*   **Role-Based Dashboards:** Tailored experiences for Applicants, Lawyers, and Administrators to ensure everyone has access to the information they need.
*   **Secure Communication:** Direct messaging between clients and their legal team.

### 1.2. Getting Started: Account Creation & Login

Accessing the app is simple and secure.

**For New Users:**

1.  Navigate to the registration page.
2.  Select your role: **"Lawyer / Professional"** or **"Client / Applicant"**.
3.  Fill in your full name, email address, and create a secure password.
4.  Click **"Create Account"**.
5.  You will be automatically redirected to the appropriate onboarding or dashboard page.

*[Screenshot of the Registration Page - Figure 1: src/components/pages/register.tsx]*

**For Existing Users:**

1.  Navigate to the login page.
2.  Enter your registered email and password.
3.  Click **"Login"**. You will be securely logged in and redirected to your dashboard.

*[Screenshot of the Login Page - Figure 2: src/components/pages/login.tsx]*

---

## 2. User Role: Applicant

This section guides you through the features available to you as an applicant.

### 2.1. First-Time Onboarding

Upon your first login, you will be guided through an onboarding process to help us understand your immigration goals.

#### **CRS Score Calculator**

The first step is to estimate your Comprehensive Ranking System (CRS) score for Canadian Express Entry.

1.  Answer the questions in the multi-step form, including details about your age, education, work experience, and language skills.
2.  Click **"Next Step"** to proceed through the form.
3.  On the final step, click **"Calculate My Score"**.
4.  The system will display your estimated CRS score along with a detailed breakdown and recommendations.

*[Screenshot of the CRS Calculator - Figure 3: src/components/pages/client-onboarding.tsx]*

### 2.2. The Applicant Dashboard

Your dashboard is your central hub for tracking your application progress.

*   **Welcome Banner:** Displays your current application status and the next immediate step.
*   **AI-Powered Case Timeline:** A personalized, estimated timeline of your immigration journey's key milestones.
*   **Quick Actions:** Quickly access your documents or message your lawyer.
*   **Next Appointment:** Shows details for your next scheduled meeting.

*[Screenshot of the Applicant Dashboard - Figure 4: src/components/pages/client-overview.tsx]*

### 2.3. Finding and Connecting with Lawyers

You can browse a directory of verified immigration professionals.

1.  Navigate to the **"Find a Lawyer"** page from the sidebar.
2.  Use the search bar and filters to find a professional who matches your needs.
3.  Review their profile, including specialties, experience, and success rate.
4.  Click the **"Share Info & Connect"** button on a lawyer's profile card to securely share your profile and initiate contact.

*[Screenshot of the Find a Lawyer Page - Figure 5: src/components/pages/find-lawyer.tsx]*

### 2.4. Managing Your Documents

This section allows you to view and upload documents requested by your legal team.

1.  Navigate to the **"My Documents"** page.
2.  You will see a list of all documents, their status (e.g., Requested, Uploaded, Approved), and the date they were last updated.
3.  For any document with a **"Requested"** status, click the **"Upload"** button to submit your file.
4.  You can also view or download documents that have already been uploaded.

*[Screenshot of the My Documents Page - Figure 6: src/components/pages/my-documents.tsx]*

### 2.5. Messaging Your Lawyer

Communicate securely with your connected legal team.

1.  Navigate to the **"Messages"** page.
2.  Select a conversation from the list on the left.
3.  The main panel will display your message history.
4.  Type your message in the input box at the bottom and click the **"Send"** button.

*[Screenshot of the Messages Interface - Figure 7: src/components/pages/client-messages.tsx]*

---

## 3. User Role: Lawyer / Team Member

This section outlines the tools available to legal professionals for case and client management.

### 3.1. The Lawyer Dashboard

Your dashboard provides a high-level overview of your firm's activities.

*   **Key Metrics:** At-a-glance cards for Total Clients, Pending Applications, Upcoming Appointments, and Monthly Revenue.
*   **AI Risk Alerts:** An AI-powered tool that scans active files and flags potential issues, such as approaching deadlines or missing documents.
*   **Recent Applications & Appointments:** Lists of the most recent activity for quick access.
*   **Quick Actions:** Shortcuts to create a new client, application, or appointment.

*[Screenshot of the Lawyer Dashboard - Figure 8: src/components/pages/dashboard.tsx]*

### 3.2. Managing Clients

The **"Clients"** page is your central CRM database.

1.  Navigate to the **"Clients"** page from the sidebar.
2.  View a table of all your clients. You can search and filter by status, case type, or country.
3.  Click on any client row to open their detailed profile in a side panel.
4.  From the client profile, you can view their case summary, activity log, manage documents, assign tasks, and more.

*[Screenshot of the Client List Page - Figure 9: src/components/pages/clients.tsx]*
*[Screenshot of the Client Profile View - Figure 10: src/components/pages/client-profile.tsx]*

### 3.3. Case Management: Documents & Tasks

*   **Documents:** From the main sidebar, navigate to **"Documents"** to manage your library of document templates. You can create new templates, edit existing ones, and assign them to clients.
*   **Tasks:** From the main sidebar, navigate to **"Tasks"** to view all tasks across your firm. You can filter by status or priority. To create a new task for a specific client, visit their profile page and use the task management tools there.

### 3.4. Using AI Tools

The **"AI Tools"** page provides powerful features to streamline your work.

*   **Document Summarizer:** Paste text from a lengthy document to get a concise summary.
*   **Application Checker:** Paste the text from an application form, select the application type, and the AI will scan for potential errors, omissions, and inconsistencies.
*   **AI-Assisted Messaging:** Generate professional, context-aware messages for clients by providing a name, context, and desired tone.

*[Screenshot of the AI Tools Page - Figure 11: src/components/pages/ai-tools.tsx]*

### 3.5. Managing Your Team

The **"Team Management"** page allows you to view team performance and manage members.

1.  Navigate to **"Team Management"** from the sidebar.
2.  View key performance indicators (KPIs) for your team.
3.  See a list of top-performing team members.
4.  Manage your team roster, including viewing profiles and contact information.

*[Screenshot of the Team Management Page - Figure 12: src/components/pages/team.tsx]*

---

## 4. User Role: Super Admin

This section is for platform administrators who have oversight of the entire system.

### 4.1. The Super Admin Dashboard

The admin dashboard provides a global overview of the entire platform.

*   **Platform-Wide Stats:** View metrics for total applicants, active firms, total revenue, and critical action items.
*   **Action Items:** See a list of urgent tasks that require administrative attention, such as pending lawyer account activations or overdue platform-wide invoices.
*   **Platform-wide Tasks & Messages:** Get a glimpse into the latest tasks and messages across all users.

*[Screenshot of the Super Admin Dashboard - Figure 13: src/components/pages/admin-overview.tsx]*

### 4.2. User Management (All Users)

The **"User Management"** page allows you to manage all lawyer and client accounts on the platform.

1.  Navigate to **"User Management"** from the admin sidebar.
2.  Use the tabs to switch between **"Lawyers / Firms"** and **"Applicants / Clients"**.
3.  From the lawyer tab, you can approve pending activations, suspend accounts, or manage subscription plans.
4.  From the client tab, you can view client details or block accounts if necessary.

*[Screenshot of the User Management Page - Figure 14: src/components/pages/admin-user-management.tsx]*

### 4.3. Platform Analytics & Reports

The **"Analytics"** page provides deep insights into platform growth and performance.

*   **Visual Charts:** View charts for user growth, revenue by case type, application status breakdowns, and more.
*   **Data Tables:** See detailed reports like client geographic distribution.

*[Screenshot of the Platform Analytics Page - Figure 15: src/components/pages/admin-platform-analytics.tsx]*

### 4.4. Managing Payments & Subscriptions

The **"Payments & Subs"** page is the financial hub for the platform.

*   **Firm Subscriptions:** View and manage the subscription status for all legal firms on the platform.
*   **Client Invoices:** See a log of all one-time invoices generated by lawyers for their clients.
*   **Transaction History:** A complete log of all payments processed through the platform.

*[Screenshot of the Payments Page - Figure 16: src/components/pages/admin-payments.tsx]*

### 4.5. System-Wide Settings

The **"Platform Settings"** page gives you control over the entire application.

*   **General:** Manage branding, such as the platform name and logo. Enable or disable global feature flags.
*   **Billing & Subscriptions:** Configure the details and pricing for each subscription plan (Starter, Pro, Enterprise).
*   **Integrations:** Manage API keys for third-party services like Google Cloud and Stripe.

*[Screenshot of the Platform Settings Page - Figure 17: src/components/pages/admin-platform-settings.tsx]*

---

## 5. Appendices

### 5.1. Troubleshooting

*   **Problem: I can't log in.**
    *   **Solution:** Double-check that your email and password are correct. Use the "Forgot Password" link if you need to reset it.
*   **Problem: A page is not loading correctly.**
    *   **Solution:** Try refreshing the page. If the problem persists, clear your browser's cache and cookies and try again.
*   **Problem: I cannot upload a document.**
    *   **Solution:** Ensure your file is in a supported format (e.g., PDF, JPG, PNG) and is smaller than the maximum file size limit (usually 5MB).

### 5.2. Contact Support

If you encounter an issue you cannot resolve, please contact our support team.

*   **In-App Support:** Navigate to the **"Help & Support"** page from your dashboard sidebar to submit a ticket.
*   **Email:** For urgent issues, you can email us at **support@visafor.com**.

### 5.3. Glossary of Terms

*   **CRM (Customer Relationship Management):** A system for managing a company's relationships and interactions with customers and potential customers.
*   **CRS (Comprehensive Ranking System):** A points-based system used by the Canadian government to assess and score Express Entry candidates.
*   **IRCC (Immigration, Refugees and Citizenship Canada):** The department of the Government of Canada responsible for immigration, refugees, and citizenship.
*   **PNP (Provincial Nominee Program):** A program through which Canadian provinces and territories can nominate individuals for immigration.
*   **LMIA (Labour Market Impact Assessment):** A document that an employer in Canada may need to get before hiring a foreign worker.`
  },
  {
    path: 'apphosting.yaml',
    content: `# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Automatically scale up to 20 instances in response to increased traffic.
  # Min instances set to 1 for faster responses to initial traffic.
  minInstances: 1
  maxInstances: 20
  # Set a higher concurrency to allow each instance to handle more requests.
  concurrency: 100`
  },
  {
    path: 'components.json',
    content: `{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}`
  },
  {
    path: 'firebase.json',
    content: `
{
  "hosting": {
    "source": ".",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "frameworksBackend": {
      "region": "us-central1"
    }
  },
  "firestore": {
    "rules": "firestore.rules"
  }
}
`
  },
  {
    path: 'next.config.ts',
    content: `
import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
    ],
  },
};

export default nextConfig;
`
  },
  {
    path: 'package.json',
    content: `{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack -p 9002",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@ducanh2912/next-pwa": "^10.2.7",
    "@genkit-ai/googleai": "^1.13.0",
    "@genkit-ai/next": "^1.13.0",
    "@hookform/resolvers": "^4.1.3",
    "@opentelemetry/exporter-jaeger": "^1.25.1",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "firebase": "^10.12.2",
    "genkit": "^1.13.0",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-firebase-hooks": "^5.1.1",
    "react-hook-form": "^7.54.2",
    "react-pdf": "^9.1.0",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.13.0",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}`
  },
  {
    path: 'src/ai/dev.ts',
    content: `
import { config } from 'dotenv';
config();

import '@/ai/flows/document-summarization.ts';
import '@/ai/flows/application-checker.ts';
import '@/ai/flows/ai-assisted-messaging.ts';
import '@/ai/flows/crs-calculator.ts';
import '@/ai/flows/success-predictor.ts';
import '@/ai/flows/risk-analyzer.ts';
import '@/ai/flows/case-timeline-flow.ts';
import '@/ai/flows/intake-form-analyzer.ts';
import '@/ai/flows/ircc-chat-flow.ts';
import '@/ai/flows/resume-builder-flow.ts';
import '@/ai/flows/document-analyzer.ts';
import '@/ai/flows/cover-letter-flow.ts';
import '@/ai/flows/writing-assistant-flow.ts';
`
  },
  {
    path: 'src/ai/flows/ai-assisted-messaging.ts',
    content: `
'use server';

/**
 * @fileOverview AI-assisted message composition for client communication.
 *
 * - composeMessage - A function that generates a message for a client based on input.
 * - ComposeMessageInput - The input type for the composeMessage function.
 * - ComposeMessageOutput - The return type for the composeMessage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ComposeMessageInputSchema = z.object({
  clientName: z.string().describe('The name of the client.'),
  messageContext: z.string().describe('The context or topic of the message.'),
  tone: z.string().describe('The desired tone of the message (e.g., formal, informal, urgent).').optional(),
});
export type ComposeMessageInput = z.infer<typeof ComposeMessageInputSchema>;

const ComposeMessageOutputSchema = z.object({
  message: z.string().describe('The AI-generated message for the client.'),
});
export type ComposeMessageOutput = z.infer<typeof ComposeMessageOutputSchema>;

const prompt = ai.definePrompt({
  name: 'composeMessagePrompt',
  input: {schema: ComposeMessageInputSchema},
  output: {schema: ComposeMessageOutputSchema},
  prompt: \`You are an AI assistant helping to compose messages for client communication.

  Based on the provided context, generate a message for the client.
  The message should be professional, personalized, and tailored to the context.
  {{#if tone}}
  Take into account the desired tone of "{{{tone}}}" when composing the message.
  {{/if}}

  Client Name: {{{clientName}}}
  Context: {{{messageContext}}}

  Message:\`, 
});

const composeMessageFlow = ai.defineFlow(
  {
    name: 'composeMessageFlow',
    inputSchema: ComposeMessageInputSchema,
    outputSchema: ComposeMessageOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error("Failed to get message from AI.");
    }
    return output;
  }
);


export async function composeMessage(jsonString: string): Promise<ComposeMessageOutput> {
  const input = JSON.parse(jsonString) as ComposeMessageInput;
  return composeMessageFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/application-checker.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that checks immigration application documents for missing information, errors, or inconsistencies.
 *
 * - applicationChecker - A function that handles the application checking process.
 * - ApplicationCheckerInput - The input type for the applicationChecker function.
 * - ApplicationCheckerOutput - The return type for the applicationChecker function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ApplicationCheckerInputSchema = z.object({
  documentText: z
    .string()
    .describe("The text content extracted from the application document."),
  applicationType: z.string().describe("The type of application (e.g., Permanent Residency, Student Visa)."),
});

export type ApplicationCheckerInput = z.infer<typeof ApplicationCheckerInputSchema>;

const ApplicationCheckerOutputSchema = z.object({
  missingInformation: z.array(z.string()).describe("A list of missing information or documents."),
  errors: z.array(z.string()).describe("A list of errors found in the document."),
  inconsistencies: z.array(z.string()).describe("A list of inconsistencies found in the document."),
  summary: z.string().describe("A summary of the application check results."),
});

export type ApplicationCheckerOutput = z.infer<typeof ApplicationCheckerOutputSchema>;

const prompt = ai.definePrompt({
  name: 'applicationCheckerPrompt',
  input: {schema: ApplicationCheckerInputSchema},
  output: {schema: ApplicationCheckerOutputSchema},
  prompt: \`You are an expert immigration consultant.

You will receive the text content of an application document and the type of application.

Your task is to identify any missing information, errors, or inconsistencies in the document.

Application Type: {{{applicationType}}}

Document Text:
{{{documentText}}}

Output the missing information, errors, and inconsistencies in separate lists. Also, provide a summary of your findings.

Ensure that the output is well-formatted and easy to understand.

Follow the schema to produce your output.\`, 
});

const applicationCheckerFlow = ai.defineFlow(
    {
        name: 'applicationCheckerFlow',
        inputSchema: ApplicationCheckerInputSchema,
        outputSchema: ApplicationCheckerOutputSchema,
    },
    async (input) => {
        const {output} = await prompt(input);
        if (!output) {
            throw new Error('Failed to get analysis from AI.');
        }
        return output;
    }
);

export async function applicationChecker(jsonString: string): Promise<ApplicationCheckerOutput> {
  const input: ApplicationCheckerInput = JSON.parse(jsonString);
  return applicationCheckerFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/case-timeline-flow.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that generates a personalized immigration case timeline.
 *
 * - getCaseTimeline - A function that generates a timeline based on a JSON string of client data.
 * - CaseTimelineInput - The input type for the client data object before stringification.
 * - CaseTimelineOutput - The return type for the getCaseTimeline function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const CaseTimelineInputSchema = z.object({
  visaType: z.string().describe('The type of visa or immigration program the client is applying for (e.g., Express Entry, Student Visa).'),
  currentStage: z.string().describe('The current stage of the application process (e.g., "Awaiting Documents", "Submitted").'),
  countryOfOrigin: z.string().describe("The client's country of origin, which can affect processing times."),
});
export type CaseTimelineInput = z.infer<typeof CaseTimelineInputSchema>;

const TimelineStepSchema = z.object({
  title: z.string().describe('The name of this step in the timeline (e.g., "Biometrics Appointment").'),
  status: z.enum(['Completed', 'In Progress', 'Upcoming']).describe('The current status of this step.'),
  estimatedDuration: z.string().describe('A human-readable estimated duration or processing time for this step (e.g., "1-2 weeks", "Approx. 3 months").'),
  description: z.string().describe('A brief, helpful description of what this step involves for the client.'),
  dueDate: z.string().optional().describe('An optional specific deadline for this step in YYYY-MM-DD format, if applicable.'),
});

const CaseTimelineOutputSchema = z.object({
  timeline: z.array(TimelineStepSchema).describe('The personalized immigration timeline, consisting of a sequence of steps.'),
});
export type CaseTimelineOutput = z.infer<typeof CaseTimelineOutputSchema>;

const prompt = ai.definePrompt({
  name: 'caseTimelinePrompt',
  input: { schema: CaseTimelineInputSchema },
  output: { schema: CaseTimelineOutputSchema },
  prompt: \`You are an expert Canadian immigration case timeline assistant. Your role is to generate a personalized, estimated timeline for a client based on their profile.

  Analyze the client's data from the provided input to create a realistic sequence of key steps. For each step, provide an estimated duration based on current trends, the client's visa type, and country of origin (as some countries have different processing speeds). Mark steps before the client's current stage as 'Completed', the current stage as 'In Progress', and subsequent steps as 'Upcoming'.

  The timeline must include critical milestones like document submission, biometrics, medical exams, and the final decision. Provide a helpful, client-friendly description for each step.

  Client Profile:
  - Visa Type: {{{visaType}}}
  - Current Stage: {{{currentStage}}}
  - Country of Origin: {{{countryOfOrigin}}}

  Generate a clear, step-by-step timeline based on this information.
  \`,
});

const caseTimelineFlow = ai.defineFlow(
  {
    name: 'caseTimelineFlow',
    inputSchema: CaseTimelineInputSchema,
    outputSchema: CaseTimelineOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    if (!output) {
      throw new Error("Failed to get timeline from AI.");
    }
    return output;
  }
);

export async function getCaseTimeline(jsonString: string): Promise<CaseTimelineOutput> {
    const input: CaseTimelineInput = JSON.parse(jsonString);
    return caseTimelineFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/cover-letter-flow.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that generates a cover letter based on a client's intake form and a job description.
 *
 * - buildCoverLetter - A function that handles the cover letter generation.
 * - BuildCoverLetterInput - The input type for the buildCoverLetter function.
 * - BuildCoverLetterOutput - The return type for the buildCoverLetter function.
 */

import { ai } from '@/ai/genkit';
import { 
    BuildCoverLetterInputSchema, 
    BuildCoverLetterOutputSchema, 
    type BuildCoverLetterInput, 
    type BuildCoverLetterOutput 
} from '@/ai/schemas/cover-letter-schema';

const prompt = ai.definePrompt({
  name: 'coverLetterBuilderPrompt',
  input: { schema: BuildCoverLetterInputSchema },
  output: { schema: BuildCoverLetterOutputSchema },
  prompt: \`You are an expert career coach specializing in writing compelling cover letters for the Canadian job market. Generate a professional cover letter in Markdown format based on the client's data and the provided job description.

  **Instructions:**
  1.  **Address the Company:** Start with a professional salutation addressed to the hiring manager at {{{companyName}}}. If no specific name is available, use a general title.
  2.  **Introduction:** State the position being applied for ({{{jobTitle}}}) and where it was seen. Briefly introduce the client, {{{clientName}}}, and express enthusiasm.
  3.  **Body Paragraphs:**
      *   Analyze the client's work history and skills from their data.
      *   Compare these with the requirements in the job description.
      *   Highlight 2-3 key experiences or skills that make the client a strong fit for the role. Use specific examples and quantify achievements where possible.
      *   Connect the client's qualifications directly to the needs mentioned in the job description.
  4.  **Closing:** Reiterate interest in the position and the company. Mention the attached resume and express eagerness for an interview.
  5.  **Tone:** Maintain a professional, confident, and enthusiastic tone throughout.

  **Client's Work History:**
  {{#each clientWorkHistory}}
  - Company: {{this.company}}, Position: {{this.position}}, Duration: {{this.duration}}, Country: {{this.country}}
  {{/each}}

  **Client's Education:**
  {{#each clientEducation}}
  - Degree: {{this.degree}}, Institution: {{this.institution}}, Year: {{this.yearCompleted}}, Country: {{this.countryOfStudy}}
  {{/each}}

  **Job Description:**
  ---
  {{{jobDescription}}}
  ---

  Generate the complete cover letter based on this information.
  \`,
});

const coverLetterBuilderFlow = ai.defineFlow(
  {
    name: 'coverLetterBuilderFlow',
    inputSchema: BuildCoverLetterInputSchema,
    outputSchema: BuildCoverLetterOutputSchema,
  },
  async input => {
    const { output } = await prompt(input);
    return output!;
  }
);

export async function buildCoverLetter(jsonString: string): Promise<BuildCoverLetterOutput> {
  const input: BuildCoverLetterInput = JSON.parse(jsonString);
  return coverLetterBuilderFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/crs-calculator.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that calculates a user's Comprehensive Ranking System (CRS) score for Canadian Express Entry.
 *
 * - calculateCrsScore - A function that calculates a CRS score based on a JSON string of detailed user input.
 * - CrsInput - The TypeScript type for the input object.
 * - CrsOutput - The return type for the calculateCrsScore function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';

const LanguageScoresSchema = z.object({
  listening: z.number().min(0).max(9),
  reading: z.number().min(0).max(9),
  writing: z.number().min(0).max(9),
  speaking: z.number().min(0).max(9),
});

export const CrsInputSchema = z.object({
  maritalStatus: z.enum(['single', 'married']).describe('The applicant\\'s marital status.'),
  age: z.number().describe('The applicant\\'s age in years.'),
  
  educationLevel: z.string().describe('The applicant\\'s highest level of education.'),
  studiedInCanada: z.enum(['yes', 'no']).describe('Whether the applicant has a Canadian degree, diploma or certificate.'),

  canadianWorkExperience: z.number().describe('Years of Canadian work experience.'),
  foreignWorkExperience: z.number().describe('Years of foreign work experience.'),
  
  firstLanguage: z.enum(['english', 'french']).describe('The applicant\\'s first official language.'),
  englishScores: LanguageScoresSchema.optional().describe('Applicant\\'s English test scores (IELTS or CELPIP equivalent).'),
  frenchScores: LanguageScoresSchema.optional().describe('Applicant\\'s French test scores (TEF or TCF equivalent).'),

  spouse: z.object({
    educationLevel: z.string().describe('Spouse\\'s highest level of education.'),
    canadianWorkExperience: z.number().describe('Spouse\\'s years of Canadian work experience.'),
    firstLanguageScores: LanguageScoresSchema.describe('Spouse\\'s language test scores.'),
  }).optional().describe('Spouse/common-law partner\\'s details, if applicable.'),

  hasJobOffer: z.enum(['yes', 'no']).describe('Whether the applicant has a valid job offer in Canada.'),
  hasProvincialNomination: z.enum(['yes', 'no']).describe('Whether the applicant has a provincial nomination.'),
  hasSiblingInCanada: z.enum(['yes', 'no']).describe('Whether the applicant has a sibling living in Canada who is a citizen or permanent resident.'),
});
export type CrsInput = z.infer<typeof CrsInputSchema>;

const CrsOutputSchema = z.object({
  totalScore: z.number().describe('The final calculated CRS score, out of 1200.'),
  breakdown: z.object({
    coreHumanCapital: z.number().describe('Points from core factors like age, education, language, and Canadian work experience.'),
    spouseFactors: z.number().describe('Points from spouse\\'s education, language, and Canadian work experience.'),
    skillTransferability: z.number().describe('Points from combinations of education, work experience, and language skills.'),
    additionalPoints: z.number().describe('Points from factors like a provincial nomination, job offer, sibling in Canada, etc.'),
  }),
  feedback: z.string().describe('A brief, helpful summary and interpretation of the score.'),
  isEligible: z.boolean().describe('A simple boolean indicating if the score is generally considered competitive.'),
});
export type CrsOutput = z.infer<typeof CrsOutputSchema>;

const prompt = ai.definePrompt({
  name: 'crsCalculatorPrompt',
  input: { schema: z.string() }, // Expects a JSON string
  output: { schema: CrsOutputSchema },
  prompt: \`You are an expert Canadian immigration consultant specializing in the Express Entry Comprehensive Ranking System (CRS). Your task is to calculate a user's CRS score with perfect accuracy based on the official IRCC guidelines. The maximum possible score is 1200.

  Carefully analyze the user's input from the provided JSON string and calculate their total CRS score.
  
  You must provide a breakdown of the score for each of the following sections according to the latest official IRCC rules:
  1.  **Core / Human Capital Factors:** Based on age, education, language proficiency (first and second), and Canadian work experience. The maximum points for a single applicant is 500.
  2.  **Spouse or common-law partner factors:** Based on the spouse's education, language proficiency, and Canadian work experience. This section only applies if marital status is 'married'. Maximum 40 points.
  3.  **Skill Transferability factors:** Based on combinations of education, language, and work experience. Maximum 100 points.
  4.  **Additional Points:** For a provincial nomination (600 points), a valid job offer (50 or 200 points), Canadian study experience (15 or 30 points), a sibling in Canada (15 points), or French-language skills (25 or 50 points). Maximum 600 points for this section (due to PNP).

  For language scores, map the provided scores (IELTS format) to Canadian Language Benchmark (CLB) levels to calculate points accurately.
  - IELTS 9 = CLB 10
  - IELTS 8-8.5 = CLB 9
  - IELTS 7-7.5 = CLB 8
  - IELTS 6.5 = CLB 7

  After calculating the score, determine if it is "competitive" (isEligible=true). A score above 450 is generally considered competitive.
  
  Finally, provide a brief, helpful, and encouraging feedback summary for the user. Mention their strengths and potential areas for improvement (e.g., improving language scores, gaining more work experience).

  User Input (JSON):
  {{{json this}}}
  \`,
});

const crsCalculatorFlow = ai.defineFlow(
  {
    name: 'crsCalculatorFlow',
    inputSchema: z.string(), // Input is a JSON string
    outputSchema: CrsOutputSchema,
  },
  async (jsonString) => {
    const { output } = await prompt(jsonString);
    if (!output) {
      throw new Error("Failed to get CRS score from AI.");
    }
    return output;
  }
);

export async function calculateCrsScore(jsonString: string): Promise<CrsOutput> {
  return crsCalculatorFlow(jsonString);
}
`
  },
  {
    path: 'src/ai/flows/document-analyzer.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that analyzes a document and provides a checklist for review.
 *
 * - analyzeDocument - A function that handles the document analysis.
 * - DocumentAnalysisInput - The input type for the analyzeDocument function.
 * - DocumentAnalysisOutput - The return type for the analyzeDocument function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const DocumentAnalysisInputSchema = z.object({
  title: z.string().describe('The title of the document being analyzed (e.g., "Passport Bio Page").'),
  category: z.string().describe('The category of the document (e.g., "Identification", "Financial").'),
});
export type DocumentAnalysisInput = z.infer<typeof DocumentAnalysisInputSchema>;

const DocumentAnalysisOutputSchema = z.object({
  checklist: z.array(z.string()).describe("A concise list of 2-3 critical items to check for this document."),
});
export type DocumentAnalysisOutput = z.infer<typeof DocumentAnalysisOutputSchema>;

const prompt = ai.definePrompt({
  name: 'documentAnalyzerPrompt',
  input: { schema: DocumentAnalysisInputSchema },
  output: { schema: DocumentAnalysisOutputSchema },
  prompt: \`You are an expert Canadian immigration paralegal known for your meticulous attention to detail.
  
  For a document titled "{{title}}" in the category "{{category}}", provide a checklist of 2-3 of the most critical items to verify to ensure it meets IRCC standards.
  
  Be concise and actionable.
  
  Example for "Passport" in "Identification":
  - Check expiry date is more than 6 months away.
  - Ensure all corners of the bio page are visible and not cut off.
  - Confirm signature is present on the signature line.
  
  Example for "Bank Statement" in "Financial":
  - Verify the document is on official bank letterhead.
  - Check that the closing balance has been stable for at least 6 months.
  - Ensure the account holder's name matches the applicant's name exactly.\`,
});

const documentAnalyzerFlow = ai.defineFlow(
  {
    name: 'documentAnalyzerFlow',
    inputSchema: DocumentAnalysisInputSchema,
    outputSchema: DocumentAnalysisOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    if (!output) {
      throw new Error("Failed to analyze document.");
    }
    return output;
  }
);

export async function analyzeDocument(jsonString: string): Promise<DocumentAnalysisOutput> {
  const input: DocumentAnalysisInput = JSON.parse(jsonString);
  return documentAnalyzerFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/document-summarization.ts',
    content: `
'use server';

/**
 * @fileOverview A document summarization AI agent.
 *
 * - summarizeDocument - A function that handles the document summarization process.
 * - SummarizeDocumentInput - The input type for the summarizeDocument function.
 * - SummarizeDocumentOutput - The return type for the summarizeDocument function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SummarizeDocumentInputSchema = z.object({
  documentText: z.string().describe('The text content of the document to summarize.'),
});
export type SummarizeDocumentInput = z.infer<typeof SummarizeDocumentInputSchema>;

const SummarizeDocumentOutputSchema = z.object({
  summary: z.string().describe('A concise summary of the document.'),
});
export type SummarizeDocumentOutput = z.infer<typeof SummarizeDocumentOutputSchema>;

const prompt = ai.definePrompt({
  name: 'summarizeDocumentPrompt',
  input: {schema: SummarizeDocumentInputSchema},
  output: {schema: SummarizeDocumentOutputSchema},
  prompt: \`Summarize the following document in a concise manner:\\n\\n{{{documentText}}}\`,
});

const summarizeDocumentFlow = ai.defineFlow(
    {
        name: 'summarizeDocumentFlow',
        inputSchema: SummarizeDocumentInputSchema,
        outputSchema: SummarizeDocumentOutputSchema,
    },
    async (input) => {
        const {output} = await prompt(input);
        if (!output) {
            throw new Error('Failed to get summary from AI.');
        }
        return output;
    }
);

export async function summarizeDocument(jsonString: string): Promise<SummarizeDocumentOutput> {
  const input: SummarizeDocumentInput = JSON.parse(jsonString);
  return summarizeDocumentFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/intake-form-analyzer.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that analyzes a client's intake form for potential issues.
 *
 * - analyzeIntakeForm - The exported server action that handles the intake form analysis.
 * - IntakeFormAnalysis - The return type for the analyzeIntakeForm function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const FlagSchema = z.object({
  severity: z.enum(['low', 'medium', 'high']).describe("The severity of the flag (low, medium, or high)."),
  field: z.string().describe("The specific form field or section related to the flag."),
  message: z.string().describe("A clear and concise message explaining the potential issue."),
});

const IntakeFormAnalysisSchema = z.object({
  summary: z.string().describe("A brief, overall summary of the AI's findings from the form review."),
  flags: z.array(FlagSchema).describe("An array of potential issues, inconsistencies, or red flags found in the form."),
  educationAnalysis: z.object({
    equivalencySuggestion: z.string().describe("Suggest the Canadian education equivalency level (e.g., 'Bachelor\\'s degree', 'Two or more certificates') based on the degrees provided."),
    notes: z.string().describe("Any brief notes or observations about the client's education history."),
  }).optional(),
});
export type IntakeFormAnalysis = z.infer<typeof IntakeFormAnalysisSchema>;

const prompt = ai.definePrompt({
  name: 'intakeFormAnalyzerPrompt',
  input: { schema: z.string() }, // Expects a JSON string
  output: { schema: IntakeFormAnalysisSchema },
  prompt: \`You are an expert Canadian immigration case analyst. Your task is to review a client's submitted intake form data and identify any potential issues, red flags, or areas that require further clarification.

  Analyze the following client data, which is provided as a JSON string:
  \`\`\`json
  {{{json this}}}
  \`\`\`

  Your analysis should focus on:
  1.  **Inconsistencies:** Check for contradictions within the provided data (e.g., work history not matching education timeline, family composition mismatch).
  2.  **Inadmissibility:** Flag any answers that could lead to medical, criminal, or other inadmissibility. Give these a 'high' severity. Pay close attention to the 'admissibility' section where 'yes' indicates a potential issue.
  3.  **Immigration History:** Pay close attention to previous applications and refusals. A 'yes' answer to a previous refusal is a significant flag that requires detailed explanation.
  4.  **Gaps in History:** Look for unexplained gaps in work or travel history.
  5.  **Completeness:** Identify areas that are incomplete or may require more detail for a successful application.
  6.  **Strengths & Weaknesses:** Briefly mention strong points (e.g., high education, Canadian work experience) or potential weak points (e.g., limited work experience, low language scores).
  7.  **Educational Equivalency:** Based on the provided education history, suggest a Canadian equivalency level and add any relevant notes. This is for the 'educationAnalysis' output field.

  Create a flag for each issue you identify. For each flag, specify the severity, the related field/section, and a clear message for the lawyer.
  
  Finally, write a concise overall summary of your findings.
  \`,
});

const intakeFormAnalyzerFlow = ai.defineFlow(
    {
        name: 'intakeFormAnalyzerFlow',
        inputSchema: z.string(),
        outputSchema: IntakeFormAnalysisSchema,
    },
    async (jsonString) => {
        const { output } = await prompt(jsonString);
        if (!output) {
            throw new Error("AI analysis failed to produce an output.");
        }
        return output;
    }
);

export async function analyzeIntakeForm(jsonString: string): Promise<IntakeFormAnalysis> {
    return intakeFormAnalyzerFlow(jsonString);
}
`
  },
  {
    path: 'src/ai/flows/ircc-chat-flow.ts',
    content: `
'use server';
/**
 * @fileOverview An AI chatbot trained on IRCC information.
 *
 * - askHeru - A function that takes a user query and returns an answer.
 * - AskHeruInput - The input type for the askHeru function.
 * - AskHeruOutput - The return type for the askHeru function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AskHeruInputSchema = z.object({
  query: z.string().describe('The user\\'s question about Canadian immigration.'),
});
export type AskHeruInput = z.infer<typeof AskHeruInputSchema>;

const AskHeruOutputSchema = z.object({
  response: z.string().describe('The AI-generated answer to the user\\'s question.'),
});
export type AskHeruOutput = z.infer<typeof AskHeruOutputSchema>;

const prompt = ai.definePrompt({
  name: 'irccChatPrompt',
  input: {schema: AskHeruInputSchema},
  output: {schema: AskHeruOutputSchema},
  prompt: \`You are an expert AI assistant for VisaFor, specializing in Canadian immigration. Your knowledge is based on the official documentation, rules, and regulations from Immigration, Refugees and Citizenship Canada (IRCC).

  When responding to a user's question, you must adhere to the following rules:
  1.  Provide accurate, clear, and concise answers based strictly on your IRCC knowledge base.
  2.  If the answer is not available in your knowledge base, you must state: "I do not have information on that topic based on my current IRCC knowledge base. For the most accurate details, please consult the official IRCC website or a regulated professional."
  3.  Do not speculate, provide legal advice, or use information from any source other than the IRCC materials you were trained on.
  4.  Begin your response directly without any preamble.

  User's Question: {{{query}}}
  \`,
});

const irccChatFlow = ai.defineFlow(
  {
    name: 'irccChatFlow',
    inputSchema: AskHeruInputSchema,
    outputSchema: AskHeruOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    if (!output) {
        throw new Error("Failed to get response from AI chat.");
    }
    return output;
  }
);


export async function askHeru(jsonString: string): Promise<AskHeruOutput> {
  const input: AskHeruInput = JSON.parse(jsonString);
  return irccChatFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/resume-builder-flow.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that generates a resume based on a client's intake form.
 *
 * - buildResume - A function that handles the resume generation.
 * - BuildResumeInput - The input type for the buildResume function.
 * - BuildResumeOutput - The return type for the buildResume function.
 */

import { ai } from '@/ai/genkit';
import {
    BuildResumeInputSchema,
    BuildResumeOutputSchema,
    type BuildResumeInput,
    type BuildResumeOutput,
} from '@/ai/schemas/resume-builder-schema';
import { z } from 'zod';

export type { BuildResumeInput, BuildResumeOutput };

const prompt = ai.definePrompt({
  name: 'resumeBuilderPrompt',
  input: { schema: BuildResumeInputSchema },
  output: { schema: BuildResumeOutputSchema },
  prompt: \`You are an expert resume writer specializing in creating professional resumes for the Canadian job market. Generate a resume in Markdown format based on the following client data.

  Key Canadian Resume Standards to follow:
  - Do not include a photo.
  - Do not include personal details like age, marital status, or nationality.
  - Start with a professional summary (2-3 sentences).
  - List work experience in reverse chronological order.
  - Use action verbs to describe accomplishments (e.g., "Managed," "Developed," "Achieved").
  - Focus on quantifiable achievements where possible.
  - Keep the resume concise, ideally 1-2 pages.
  - Ensure contact information is clear and professional (Name, Phone, Email, Address).
  - Format dates consistently (e.g., Month Year - Month Year).
  - For education, list the most recent degree first.
  - Add a "Skills" section summarizing key technical and soft skills.

  **Client Name:** {{{clientName}}}
  **Contact:**
  - Email: {{{clientContact.email}}}
  - Phone: {{{clientContact.phone}}}
  - Address: {{{clientContact.address}}}

  **Work History:**
  {{#each clientWorkHistory}}
  - **{{this.position}}** at {{this.company}} ({{this.country}}) - *{{this.duration}}*
  {{/each}}
  
  **Education:**
  {{#each clientEducation}}
  - **{{this.degree}}**, {{this.institution}} ({{this.countryOfStudy}}) - *Completed {{this.yearCompleted}}*
  {{/each}}

  Generate a complete resume based on this data. Pay close attention to the work history and education sections to create a compelling professional narrative.
  \`,
});

const resumeBuilderFlow = ai.defineFlow(
  {
    name: 'resumeBuilderFlow',
    inputSchema: BuildResumeInputSchema,
    outputSchema: BuildResumeOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);


export async function buildResume(jsonString: string): Promise<BuildResumeOutput> {
  const input: BuildResumeInput = JSON.parse(jsonString);
  return resumeBuilderFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/risk-analyzer.ts',
    content: `
'use server';
/**
 * @fileOverview An AI agent that analyzes client files to identify risks and suggest actions.
 *
 * - analyzeClientRisks - A function that handles the risk analysis process.
 * - RiskAnalysisInput - The input type for the analyzeClientRisks function.
 * - RiskAnalysisOutput - The return type for the analyzeClientRisks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

// Simplified schema for what the AI needs.
const DocumentSchema = z.object({
  title: z.string(),
  status: z.enum(['Uploaded', 'Pending Review', 'Approved', 'Rejected', 'Requested', 'Pending Client Review']),
  dateAdded: z.string().describe('The date the document was added (YYYY-MM-DD).'),
});

const ActivitySchema = z.object({
  title: z.string(),
  timestamp: z.string().describe('The ISO 8601 timestamp of the activity.'),
});

const ClientProfileForAnalysisSchema = z.object({
  id: z.number(),
  name: z.string(),
  status: z.enum(['Active', 'On-hold', 'Closed', 'Blocked']),
  activity: z.array(ActivitySchema).describe('A log of the most recent activities.'),
  documents: z.array(DocumentSchema).describe('A list of client documents.'),
  caseSummary: z.object({
    dueDate: z.string().describe('The upcoming due date for the case (YYYY-MM-DD), if any.'),
  }),
});

export const RiskAnalysisInputSchema = z.object({
  clients: z.array(ClientProfileForAnalysisSchema),
  currentDate: z.string().describe('The current date in YYYY-MM-DD format.'),
});
export type RiskAnalysisInput = z.infer<typeof RiskAnalysisInputSchema>;


const ClientAlertSchema = z.object({
  clientId: z.number().describe("The ID of the flagged client."),
  clientName: z.string().describe("The name of the flagged client."),
  issueSummary: z.string().describe("A short summary of the issue or risk identified."),
  suggestedAction: z.string().describe("A specific, actionable next step to mitigate the risk."),
});
export type ClientAlert = z.infer<typeof ClientAlertSchema>;


export const RiskAnalysisOutputSchema = z.object({
  alerts: z.array(ClientAlertSchema),
});
export type RiskAnalysisOutput = z.infer<typeof RiskAnalysisOutputSchema>;

const prompt = ai.definePrompt({
  name: 'riskAnalyzerPrompt',
  input: {schema: RiskAnalysisInputSchema},
  output: {schema: RiskAnalysisOutputSchema},
  prompt: \`You are an AI Risk System running inside a lawyer's immigration CRM dashboard. Your role is to review a list of active client files and flag any potential risks.

  Analyze each client profile provided in the JSON input and identify any of the following risk factors:

  1.  **Missing or Rejected Documents:** Flag any client who has documents with a status of 'Requested' or 'Rejected'.
  2.  **Stale Cases:** Flag any active case where the most recent activity in their timeline is more than 30 days ago.
  3.  **Approaching Deadlines:** Flag any case where the 'dueDate' in their case summary is within the next 30 days.

  For each client you flag, you must provide a concise summary of the issue and a clear, suggested action for the lawyer. If a client has multiple issues, create a separate alert for each.

  Here is the list of clients to analyze:
  \`\`\`json
  {{{json this}}}
  \`\`\`

  Return your findings as an array of alerts in the specified JSON format. If there are no risks, return an empty array.
  \`,
});

const riskAnalyzerFlow = ai.defineFlow(
  {
    name: 'riskAnalyzerFlow',
    inputSchema: RiskAnalysisInputSchema,
    outputSchema: RiskAnalysisOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
      throw new Error("Failed to analyze risks.");
    }
    return output;
  }
);

export async function analyzeClientRisks(jsonString: string): Promise<RiskAnalysisOutput> {
    const input: RiskAnalysisInput = JSON.parse(jsonString);
    return riskAnalyzerFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/success-predictor.ts',
    content: `
'use server';

/**
 * @fileOverview An AI agent that analyzes a client's profile to predict immigration application success.
 *
 * - predictSuccess - A function that handles the success prediction analysis.
 * - SuccessPredictorInputSchema - The Zod schema for the detailed user input object.
 * - SuccessPredictorOutput - The return type for the predictSuccess function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';

const SuccessPredictorInputSchema = z.object({
  visaType: z.string().describe('The type of visa or immigration program the client is applying for (e.g., Express Entry, Student Visa).'),
  countryOfOrigin: z.string().describe("The client's country of origin."),
  age: z.number().describe("The client's age in years."),
  educationLevel: z.string().describe("The client's highest level of education."),
});
export type SuccessPredictorInput = z.infer<typeof SuccessPredictorInputSchema>;

const SuccessPredictorOutputSchema = z.object({
  successProbability: z.number().min(0).max(100).describe('The estimated probability of success for the application, as a percentage.'),
  scoreLabel: z.enum(['Green', 'Yellow', 'Red']).describe('A color-coded score label based on the success probability (Green > 80%, Yellow 50-79%, Red < 50%).'),
  reason: z.string().describe('A brief, 1-2 sentence explanation for the given score, highlighting key positive or negative factors.'),
});
export type SuccessPredictorOutput = z.infer<typeof SuccessPredictorOutputSchema>;

const prompt = ai.definePrompt({
  name: 'successPredictorPrompt',
  input: { schema: SuccessPredictorInputSchema },
  output: { schema: SuccessPredictorOutputSchema },
  prompt: \`You are an expert Canadian immigration advisor with deep knowledge of immigration law, IRCC policies, and current processing trends. Your task is to provide a realistic, data-informed assessment of a client's immigration application profile based on the provided JSON data.

  Client Profile:
  {{{json this}}}


  Based on this information, you must:
  1.  Calculate a **Success Probability** as a percentage. This should reflect the likely outcome based on factors like age points in Express Entry, education credential value, visa type requirements, and any known trends associated with the country of origin (like high volume or specific verification needs).
  2.  Determine a **Score Label**:
      - 'Green' if the success probability is 80% or higher.
      - 'Yellow' if the probability is between 50% and 79%.
      - 'Red' if the probability is below 50%.
  3.  Write a concise **Reason** (1-2 sentences) explaining the score. Mention the most critical positive or negative factors influencing the assessment. For example, "The high score is due to the candidate's young age and high level of education, which are strongly favored in the Express Entry system." or "The lower probability reflects the high competition for this visa type and the need for a strong language test score, which is not yet provided."

  Return your analysis in the specified JSON format.
  \`,
});


const successPredictorFlow = ai.defineFlow(
  {
    name: 'successPredictorFlow',
    inputSchema: SuccessPredictorInputSchema,
    outputSchema: SuccessPredictorOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    if (!output) {
      throw new Error("Failed to get prediction from AI.");
    }
    return output;
  }
);


export async function predictSuccess(jsonString: string): Promise<SuccessPredictorOutput> {
  const input = JSON.parse(jsonString) as SuccessPredictorInput;
  return successPredictorFlow(input);
}
`
  },
  {
    path: 'src/ai/flows/writing-assistant-flow.ts',
    content: `
'use server';

/**
 * @fileOverview A general-purpose AI writing assistant.
 *
 * - assistWithWriting - A function that takes text and an instruction to modify it.
 * - WritingAssistantInput - The input type for the assistWithWriting function.
 * - WritingAssistantOutput - The return type for the assistWithWriting function.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { 
    WritingAssistantInputSchema, 
    WritingAssistantOutputSchema, 
    type WritingAssistantInput, 
    type WritingAssistantOutput 
} from '@/ai/schemas/writing-assistant-schema';

export type { WritingAssistantInput, WritingAssistantOutput };

const writingAssistantPrompt = ai.definePrompt({
  name: 'writingAssistantPrompt',
  input: { schema: WritingAssistantInputSchema },
  output: { schema: WritingAssistantOutputSchema },
  prompt: \`You are a helpful writing assistant. Your task is to take the user's text and modify it based on their instruction.

  **Instruction:** {{{instruction}}}

  **Original Text:**
  ---
  {{{textToImprove}}}
  ---

  Return only the improved text in the 'improvedText' field.
  \`,
});


const writingAssistantFlow = ai.defineFlow(
    {
        name: 'writingAssistantFlow',
        inputSchema: WritingAssistantInputSchema,
        outputSchema: WritingAssistantOutputSchema,
    },
    async (input) => {
        const { output } = await writingAssistantPrompt(input);
        if (!output) {
            throw new Error("AI assistant failed to produce an output.");
        }
        return output;
    }
);


export async function assistWithWriting(jsonString: string): Promise<WritingAssistantOutput> {
  const input: WritingAssistantInput = JSON.parse(jsonString);
  return writingAssistantFlow(input);
}
`
  },
  {
    path: 'src/app/page.tsx',
    content: `
'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';
import { useGlobalData } from '@/context/GlobalDataContext';
import { Client, TeamMember } from '@/lib/data';

export default function DashboardSelectPage() {
    const router = useRouter();
    const { userProfile, loading } = useGlobalData();

    useEffect(() => {
        if (loading) return; // Wait until loading is complete

        if (userProfile) {
            switch (userProfile.authRole) {
                case 'admin':
                    router.replace('/admin/dashboard');
                    break;
                case 'lawyer':
                    const lawyerProfile = userProfile as TeamMember;
                    // Check if the essential onboarding field (licenseNumber) is filled.
                    if (lawyerProfile.licenseNumber && lawyerProfile.licenseNumber !== 'N/A') {
                        router.replace('/lawyer/dashboard');
                    } else {
                        router.replace('/lawyer/onboarding');
                    }
                    break;
                case 'client':
                    const clientProfile = userProfile as Client;
                    if (clientProfile.onboardingComplete) {
                        router.replace('/client/dashboard');
                    } else {
                        router.replace('/client/onboarding');
                    }
                    break;
                default:
                    router.replace('/login');
            }
        } else {
            // If no profile, wait a bit for it to load, then redirect to login if still nothing
            const timer = setTimeout(() => {
                router.replace('/login');
            }, 1500);
            return () => clearTimeout(timer);
        }
    }, [userProfile, router, loading]);

    return (
        <div className="flex min-h-screen items-center justify-center bg-muted/40 p-4">
             <Card>
                <CardContent className="flex flex-col justify-center items-center h-[200px] w-[300px] gap-4">
                     <Loader2 className="h-8 w-8 animate-spin text-primary" />
                     <p className="text-muted-foreground">Redirecting...</p>
                </CardContent>
            </Card>
        </div>
    );
}
`
  }
];

export default function ExportPage() {
    const [activeFile, setActiveFile] = useState(allFiles[0]);
    const { toast } = useToast();

    const copyToClipboard = (content: string) => {
        navigator.clipboard.writeText(content);
        toast({
            title: "Copied to Clipboard!",
            description: `The content of ${activeFile.path} has been copied.`,
        });
    };

    return (
        <div className="bg-background">
            <div className="container mx-auto p-4 md:p-8">
                <Card>
                    <CardHeader>
                        <CardTitle>Application Code Export</CardTitle>
                        <CardDescription>
                            Here is the complete code for your application. Select a file from the list to view its contents, then use the "Copy Code" button.
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 h-[calc(100vh-20rem)]">
                            <div className="md:col-span-1 border rounded-md">
                                <ScrollArea className="h-full">
                                    <div className="p-2">
                                    {allFiles.map(file => (
                                        <button 
                                            key={file.path} 
                                            onClick={() => setActiveFile(file)}
                                            className={`w-full text-left p-2 rounded-md text-sm flex items-center gap-2 ${activeFile.path === file.path ? 'bg-muted font-semibold' : 'hover:bg-muted/50'}`}
                                        >
                                            <FileIcon className="h-4 w-4 shrink-0" />
                                            <span className="truncate">{file.path}</span>
                                        </button>
                                    ))}
                                    </div>
                                </ScrollArea>
                            </div>
                            <div className="md:col-span-3 flex flex-col border rounded-md overflow-hidden">
                                <div className="flex justify-between items-center p-2 bg-muted/50 border-b">
                                    <p className="font-mono text-sm">{activeFile.path}</p>
                                    <Button size="sm" onClick={() => copyToClipboard(activeFile.content)}>
                                        <Copy className="mr-2 h-4 w-4" />
                                        Copy Code
                                    </Button>
                                </div>
                                <ScrollArea className="flex-1">
                                    <pre className="text-xs p-4 bg-zinc-900 text-white"><code className="font-mono">{activeFile.content}</code></pre>
                                </ScrollArea>
                            </div>
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    )
}
