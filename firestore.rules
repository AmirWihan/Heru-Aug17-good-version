
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.authRole == role;
    }

    // Admins can read all data but cannot write to prevent accidental changes.
    // Write operations for admin should be handled via secure Cloud Functions.
    match /{document=**} {
      allow read: if request.auth != null && hasRole('admin');
      allow write: if false; // Safeguard against accidental writes
    }

    // Users collection
    match /users/{userId} {
      // Users can read and update their own profile.
      allow read, update: if request.auth.uid == userId;
      // Allow creation of user profile document during registration.
      allow create: if request.auth != null;
    }

    // Generic rule for collections where users should only access their own documents
    // This could apply to collections like 'client_agreements', 'invoices', etc.
    // assumes documents are keyed by userId or have a 'userId' field.
    match /{collection}/{docId} {
       // Example: if a document has a 'userId' field
       allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    // Example for a shared collection like 'teamMembers' in a firm
    match /teamMembers/{memberId} {
        // Allow read if the user belongs to the same firm.
        // This requires firmId to be stored on the user document.
        allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.firmId == resource.data.firmId;
    }
  }
}
